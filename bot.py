from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, CallbackQuery
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
import sqlite3
import datetime
import threading
import random
import config
import time
from datetime import timedelta
from aiogram.utils.exceptions import BotBlocked
import asyncio



class Form(StatesGroup):
    image = State()
    caption = State()
    photo = State()


def get_name_channel(link):
    with sqlite3.connect("channels/Channels_for_jetons.db") as db:
        cursor = db.cursor()
        cursor.execute("SELECT name FROM Channels_for_jetons WHERE link = ?", [link])
        return cursor.fetchall()[0][0]

def get_id_channel(link):
    with sqlite3.connect("channels/Channels_for_jetons.db") as db:
        cursor = db.cursor()
        cursor.execute("SELECT id_channel FROM Channels_for_jetons WHERE link = ?", [link])
        return cursor.fetchall()[0][0]


async def on_startup(_):
    print("–ë–æ—Ç –æ–Ω–ª–∞–π–Ω")
    start_db_stats()
    print("–ë–î —Å–æ —Å—Ç–∞—Ç–∞–º–∏ –æ–Ω–ª–∞–π–Ω")
    start_db_channels()
    print("–ë–¥ —Å –∫–∞–Ω–∞–ª–∞–º–∏ –æ–Ω–ª–∞–π–Ω")
    list_channels()
    print("–ë–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–π –∏ —É–¥–∞–ª–µ–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤ –æ–Ω–ª–∞–π–Ω")


def start_db_stats():
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    global cursor, conn
    with sqlite3.connect('db_files/bot_stats.db', check_same_thread=False) as conn:
        cursor = conn.cursor()
        cursor.execute('''
CREATE TABLE IF NOT EXISTS user_stats (
user_id INTEGER PRIMARY KEY,
luna INTEGER,
primogems INTEGER,
tokens INTEGER,
slots_count INTEGER,
shans_win_luna,
shans_win_primogem
)
''')


def start_db_channels():
    global conn_channels, cursor_channels
    with sqlite3.connect('db_files/channels.db', check_same_thread=False) as conn_channels:
        cursor_channels = conn_channels.cursor()
        cursor_channels.execute('''
CREATE TABLE IF NOT EXISTS channels (
user_id INTEGER,
channel_id INTEGER,
last_taked INTEGER
)
''')


def list_channels():
    global conn_list_channels, cursor_list_channels
    with sqlite3.connect('channels/Channels_for_jetons.db', check_same_thread=False) as conn_list_channels:
        cursor_list_channels = conn_list_channels.cursor()
        cursor_list_channels.execute('''
CREATE TABLE IF NOT EXISTS Channels_for_jetons (
name TEXT,
link TEXT, 
id_channel INTEGER UNIQUENESS
)
''')


# –°–æ–∑–¥–∞–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_lock = threading.Lock()
user_tokens = {}

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_command_time = {}

# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
bot = Bot(config.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ó–¥–µ—Å—å config.channel_id —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ä–∞–≤–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π channel_id


admin_ids = [629025283, 886070687]


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(msg: types.message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    user_id = msg.chat.id
    with db_lock:
        cursor.execute('SELECT user_id FROM user_stats WHERE user_id=?', (user_id,))
        print(cursor.fetchone())
        if cursor.fetchone() is None:
            cursor.execute('INSERT OR IGNORE INTO user_stats (user_id, luna, primogems, tokens, slots_count, shans_win_luna, shans_win_primogem) VALUES (?, 0, 0, 1, 0, 1, 1)',
                           (user_id,))
            conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await msg.answer(
        '–ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è (–∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è):\n\n- –ù–∞–∂–º–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞;\n- –ù–∞–∂–º–∏ "–ö—Ä—É—Ç–∏—Ç—å –ê–≤—Ç–æ–º–∞—Ç! üé∞" —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É!\n- –ù–∞–∂–º–∏ "–ü–æ–ª—É—á–∏—Ç—å –∂–µ—Ç–æ–Ω—ã üéü" —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∂–µ—Ç–æ–Ω—ã;\n- –ù–∞–∂–º–∏ "–û –±–æ—Ç–µ ü§ñ" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ù–∞—à–µ–º –±–æ—Ç–µ;\n- –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–µ–∫–ª–∞–º–∞ üí∞" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å—é –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–ª–∞–º–µ –≤ –ù–∞—à–µ–º –±–æ—Ç–µ;\n- –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üíª" —á—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞.',
        reply_markup=get_main_keyboard())


async def process_start_command(msg: types.message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –ø–æ–≤—Ç–æ—Ä–Ω–æ
    await start_command(msg)


@dp.message_handler(commands=['astats'])
async def stats_command(msg: types.message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if msg.chat.id not in admin_ids:
        await msg.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
        return

    with db_lock:
        cursor.execute('SELECT COUNT(*) FROM user_stats')
        count = cursor.fetchone()[0]

    await msg.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ—Ç–æ–Ω–æ–≤
@dp.message_handler(commands=['addtokens'])
async def add_tokens_command(msg: types.message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if msg.chat.id not in admin_ids:
        await msg.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
        return
    print(msg.text)
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = msg.text.split()[1:]
    if len(args) != 2:
        await msg.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addtokens <user_id> <amount>')
        return
    try:
        user_id = int(args[0])
        amount = int(args[1])
    except ValueError:
        await msg.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addtokens <user_id> <amount>')
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db_lock:
        cursor.execute('UPDATE OR IGNORE user_stats SET tokens=tokens+? WHERE user_id=?', (amount, user_id))
        conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await msg.answer(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞–º {amount} –∂–µ—Ç–æ–Ω–æ–≤. –°–∫–æ—Ä–µ–π –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É!')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await msg.answer(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —Ç–µ–ø–µ—Ä—å {amount} –∂–µ—Ç–æ–Ω–æ–≤')


@dp.message_handler(commands=["delete_channel"])
async def add_channels_for_bot(msg: types.message):
    if msg.chat.id not in admin_ids:
        await msg.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
        return
    else:
        try:
            with db_lock:
                mes = msg.text[16:]
                cursor_list_channels.execute("DELETE FROM Channels_for_jetons WHERE link = ?", [str(mes)])
                conn_list_channels.commit()
                await msg.answer(
                    f"–ö–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ {mes} –±—ã–ª —É–¥–∞–ª–µ–Ω")
        except Exception:
            await msg.answer(
                "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:\n/delete_channel <—Å—Å—ã–ª–∫–∞>")
@dp.message_handler(commands=["add_channel"])
async def add_channels_for_bot(msg: types.message):
    if msg.chat.id not in admin_ids:
        await msg.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
        return
    else:
        try:
            with db_lock:
                mes = msg.text[13:]
                name, link, id_channel = mes.split("*")[0], mes.split("*")[1], mes.split("*", 2)[2]
                cursor_list_channels.execute("INSERT OR IGNORE INTO Channels_for_jetons(name, link, id_channel) VALUES(?, ?, ?)",
                                             [str(name), str(link), str(id_channel)])
                conn_list_channels.commit()
                await msg.answer(
                    f"–ö–∞–Ω–∞–ª {name} (—Å—Å—ã–ª–∫–∞: {link}) –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        except Exception:
            await msg.answer(
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∏–º—è –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ:\n/add_channel <–∏–º—è –∫–∞–Ω–∞–ª–∞>*<—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª>*<ID —á–∞—Ç–∞ –∫–∞–Ω–∞–ª–∞>")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
@dp.message_handler(commands=["post"])
async def mailing_message(msg: types.message):
    if msg.chat.id not in admin_ids:
        return await msg.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
    else:
        try:
            caption = msg.text[6:]
            if str(caption) == "":
                return await msg.answer(
                "–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –û–±—Ä–∞–∑–µ—Ü –∫–æ–º–∞–Ω–¥—ã:\n/post <—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏>\n\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–µ–Ω—é, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É –∏ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å")
            Form.caption = str(caption)
            markup = InlineKeyboardMarkup(resize_keyboard=True, row_width=1)
            b1 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏ –≤—ã–ª–æ–∂–∏—Ç—å", callback_data="add_photo")
            b2 = InlineKeyboardButton("–í—ã–ª–æ–∂–∏—Ç—å", callback_data="public_post")
            b3 = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="dont_public")
            markup.add(b1, b2, b3)
            await msg.answer(f"–í–∞—à –ø–æ—Å—Ç:\n{caption}", reply_markup=markup)
        except Exception:
            await msg.answer(
                "–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. –û–±—Ä–∞–∑–µ—Ü –∫–æ–º–∞–Ω–¥—ã:\n/post <—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏>\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –º–µ–Ω—é, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É –∏ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
@dp.message_handler(commands=['broadcast'])
async def broadcast_message(msg: types.message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if msg.chat.id not in admin_ids:
        await msg.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    message_text = msg.text[11:]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
    with db_lock:
        cursor.execute('SELECT user_id FROM user_stats')
        user_ids = [row[0] for row in cursor.fetchall()]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–æ—Ç–∞
    for user_id in user_ids:
        await msg.answer(user_id, message_text)


@dp.callback_query_handler(text="dont_public")
async def dont_public_text(query: CallbackQuery):
    print("yea")
    await query.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=None)


@dp.callback_query_handler(text='add_photo')
async def photo_add(query: CallbackQuery):
    await query.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≥–∏—Ñ –¥–ª—è –ø–æ—Å—Ç–∞")
    await Form.photo.set()


@dp.callback_query_handler(text="public_post")
async def public_post(query: CallbackQuery):
    with db_lock:
        cursor.execute("SELECT user_id FROM user_stats")
        records = cursor.fetchall()
        conn.commit()
    for i in records:
        try:
            await bot.send_message(chat_id=i[0], text=f"{str(Form.caption)}")
        except BotBlocked as E:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å id {i[0]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –Ω–µ–º—É –Ω–µ –ø—Ä–∏—à–ª–µ—Ç—Å—è\n=====================================================\n{E}")
            continue
    return await query.message.answer("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è!")

# –ü–æ–ª—É—á–∏—Ç—å –∂–µ—Ç–æ–Ω—ã c –∫–∞–Ω–∞–ª–∞
@dp.callback_query_handler()
async def channel_1(query: CallbackQuery):
    if query.data.split("|")[0] == "channel":
        # —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(row_width=1)
        sub = InlineKeyboardButton(url=f"{query.data.split('|')[1]}", text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
        get = InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∂–µ—Ç–æ–Ω—ã", callback_data=f"get_chan|{query.data.split('|')[2]}")
        markup.add(sub, get)
        # –∏–∑–º–µ–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text(text='–î–µ—Ä–∂–∏, —Ö–∞–ª—è–≤—â–∏–∫)', reply_markup=markup)
    elif query.data.split("|")[0] == "get_chan":
        # –ø–æ–ª—É—á–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        now = datetime.datetime.now()
        # –ø–æ–ª—É—á–∞–µ—Ç user_id
        user_id = query.message.chat.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –æ–± –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂–µ—Ç–æ–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π.
        with db_lock:
            # –±–µ—Ä–µ—Ç –∑–∞–ø–∏—Å—å —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –≤ –∫–æ—Ç–æ—Ä–æ–π user_id –∏ channel_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–º
            cursor_channels.execute('SELECT user_id FROM channels WHERE user_id=? AND channel_id=?',
                                    (user_id, int(query.data.split("|")[1])))
            # –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç, —Ç–æ:
            if cursor_channels.fetchone() is None:
                # —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –∑–∞–ø–∏—Å—ã–≤–∞—è user_id, channel_id –∏ last_taked. –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ö—Ä–∞–Ω–∏—Ç –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∂–µ—Ç–æ–Ω—ã
                cursor_channels.execute(
                    f'INSERT INTO channels(user_id, channel_id, last_taked) VALUES(?, ?, 0)', [user_id, int(query.data.split("|")[1])])
            cursor_channels.execute("SELECT last_taked FROM channels WHERE user_id=? AND channel_id=?",
                                           (user_id, int(query.data.split("|")[1])))

            last = cursor_channels.fetchone()
            conn_channels.commit()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —Å–µ–≥–æ–¥–Ω—è—à–µ–Ω–≥–æ —á–∏—Å–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∂–µ—Ç–æ–Ω –∏–ª–∏ –Ω–µ—Ç
        if last[0] == now.day:
            # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            markup = InlineKeyboardMarkup(row_width=1)
            get = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="channels")
            markup.add(get)
            # –∏–∑–º–µ–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.edit_text(
                text='–ü–æ—Ö–æ–∂–µ –≤—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∂–µ—Ç–æ–Ω –æ—Ç —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –ú–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –¥—Ä—É–≥–∏—Ö?',
                reply_markup=markup)
            return

        user_channel_status = await bot.get_chat_member(chat_id=int(query.data.split("|")[1]), user_id=user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        if user_channel_status["status"] != 'left':
            with db_lock:
                # –≤ –±–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á–∏—Å–ª–æ(–µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 22 –º–∞—Ä—Ç–∞, –∑–∞–ø–∏—à–µ—Ç—Å—è 22)
                cursor_channels.execute('UPDATE channels SET last_taked=? WHERE user_id=? AND channel_id=?',
                                        (now.day, int(user_id), int(query.data.split("|")[1])))
                conn_channels.commit()
                # –≤ –±–¥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–∏–Ω –∂–µ—Ç–æ–Ω
                cursor.execute(f'UPDATE user_stats SET tokens=tokens+?  WHERE user_id=?', (1, user_id))
                conn.commit()
            # —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = InlineKeyboardMarkup(row_width=1)
            get = InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="channels")
            markup.add(get)
            # –∏–∑–º–µ–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.edit_text(text='–ñ–µ—Ç–æ–Ω –∑–∞—á–∏—Å–ª–µ–Ω. –ú–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç —Å–æ–±—Ä–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω?', reply_markup=markup)
        else:
            # –∏–∑–º–µ–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.answer_callback_query(callback_query_id=query.id, show_alert=True,
                                            text="–°–ø–µ—Ä–≤–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!")
    elif query.data == 'channels':
        # —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        with db_lock:
            cursor_list_channels.execute("SELECT link FROM Channels_for_jetons")
            records = cursor_list_channels.fetchall()
            conn_list_channels.commit()
            # —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = InlineKeyboardMarkup(row_width=3)
            for i in records:
                name = get_name_channel(i[0])
                id_channel = get_id_channel(i[0])
                button_channel = InlineKeyboardButton(text=f"{name}", callback_data=f"channel|{i[0]}|{id_channel}")
                markup.add(button_channel)
            conn_channels.commit()
        # –∏–∑–º–µ–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.edit_text("–ñ–µ—Ç–æ–Ω—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:", reply_markup=markup)
    else:
        return


# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∂–µ—Ç–æ–Ω–æ–≤ –∫–∞–Ω–∞–ª–æ–≤
@dp.callback_query_handler(text='channels')
async def get_channels(query: CallbackQuery):
    # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    with db_lock:
        cursor_list_channels.execute("SELECT link FROM channels_name_and_link")
        records = cursor_list_channels.fetchall()
        conn_list_channels.commit()
        # —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(row_width=3)
        for i in records:
            name = get_name_channel(i[0])
            id_channel = get_id_channel(i[0])
            button_channel = InlineKeyboardButton(text=f"{name}", callback_data=f"channel|{i[0]}|{id_channel}")
            markup.add(button_channel)
    # –∏–∑–º–µ–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.edit_text("–ñ–µ—Ç–æ–Ω—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mystats
@dp.message_handler(text=['–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà'])
async def my_stats_command(msg: types.message):
    user_id = msg.chat.id
    with db_lock:
        cursor.execute('SELECT luna, primogems, tokens, slots_count, shans_win_luna, shans_win_primogem FROM user_stats WHERE user_id=?', (user_id,))
        stats = cursor.fetchone()
    await msg.answer(f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n' +
                     f'‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n' +
                     f'- ID –∞–∫–∫–∞—É–Ω—Ç–∞: {user_id}\n' +
                     f'- –õ—É–Ω–∞: {stats[0]}\n' +
                     f'- –ü—Ä–∏–º–æ–≥–µ–º—ã: {stats[1]}\n' +
                     f'- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤: {stats[2]}\n' +
                     f'- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –≤ "–õ—É–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç": {stats[3]}\n' +  
                     f'\n' +      
                     f'<b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã:</b>\n' + 
                     f'‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n' + 
                     f'- –ü—Ä–∏–∑ "–õ—É–Ω–∞ 30 –¥–Ω–µ–π": {round(stats[4], 1)}%\n' +  
                     f'- –ü—Ä–∏–∑ "–ü—Ä–∏–º–æ–≥–µ–º—ã 120 —à—Ç—É–∫": {round(stats[5], 1)}%\n' +   
                     f'\n' +  
                     f'–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É: –ø–µ—Ä–µ–π–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª –±–æ—Ç–∞ <b>"–û –±–æ—Ç–µ ü§ñ"</b>\n' +           
                     f'', parse_mode='HTML')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã


@dp.message_handler(text=['–ö—Ä—É—Ç–∏—Ç—å –ê–≤—Ç–æ–º–∞—Ç! üé∞'])
async def play_slot_machine(msg: types.message):
    user_id = msg.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    if user_id in last_command_time and datetime.datetime.now() - last_command_time[user_id] < timedelta(seconds=10):
        await msg.answer('–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ!')
        return

    with db_lock:
        cursor.execute('SELECT tokens FROM user_stats WHERE user_id=?', (user_id,))
        tokens = cursor.fetchone()[0]
        if tokens < 1:
            await msg.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–µ—Ç–æ–Ω–æ–≤ –¥–ª—è –∏–≥—Ä—ã –≤ –∞–≤—Ç–æ–º–∞—Ç')
            return
        cursor.execute('UPDATE user_stats SET tokens=tokens-1, slots_count=slots_count+1, shans_win_luna=shans_win_luna+0.1, shans_win_primogem=shans_win_primogem+0.2 WHERE user_id=?', (user_id,))
        conn.commit()

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤–∏–¥–µ–æ
    videos = ['win_luna.mp4', 'win_primogems.mp4', 'lose_1.mp4', 'lose_2.mp4', 'lose_3.mp4', 'lose_4.mp4']
    win_probability = 0.00001  # 0.001%
    if random.random() < win_probability:
        video = videos[0]
        with db_lock:
            cursor.execute('UPDATE user_stats SET luna=luna+1 WHERE user_id=?', (user_id,))
            conn.commit()
        message_text = f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ª—É–Ω—É!'
    elif random.random() < win_probability:
        video = videos[1]
        with db_lock:
            cursor.execute('UPDATE user_stats SET primogems=primogems+10 WHERE user_id=?', (user_id,))
            conn.commit()
        message_text = f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–º–æ–≥–µ–º—ã!'
    else:
        video = random.choice([videos[-1], videos[-2]])
        message_text = '–Ø —Å–æ–∂–∞–ª–µ—é, –Ω–æ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ü•∫\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë –∂–µ—Ç–æ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ' \
                       '"–ü–æ–ª—É—á–∏—Ç—å –∂–µ—Ç–æ–Ω—ã üéü".'

    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç–æ–º
    with open(f"{video}", "rb") as video_file:
        video_message = await bot.send_video(user_id, caption='–ö—Ä—É—Ç–∏–º –∞–≤—Ç–æ–º–∞—Ç! üé∞', video=video_file)

    # # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_command_time[user_id] = datetime.datetime.now()

    await asyncio.sleep(11)

    # # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ
    await bot.delete_message(chat_id=user_id, message_id=video_message.message_id)
    await msg.answer(message_text)


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä—ã

@dp.message_handler(text=['–ü–æ–ª—É—á–∏—Ç—å –∂–µ—Ç–æ–Ω—ã üéü'])
async def get_spins(msg: types.message):
    # —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    with db_lock:
        cursor_list_channels.execute("SELECT link FROM Channels_for_jetons")
        records = cursor_list_channels.fetchall()
        conn_list_channels.commit()
        # —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(row_width=3)
        for i in records:
            name = get_name_channel(i[0])
            id_channel = get_id_channel(i[0])
            button_channel = InlineKeyboardButton(text=f"{name}", callback_data=f"channel|{i[0]}|{id_channel}")
            markup.add(button_channel)
    # –∏–∑–º–µ–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await msg.answer("–ñ–µ—Ç–æ–Ω—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:", reply_markup=markup)


@dp.message_handler(text=['–û –±–æ—Ç–µ ü§ñ'])
async def get_inform(msg: types.message):
    await msg.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –õ—É–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç:\n\n–õ—É–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ—Ç –∫–∞–Ω–∞–ª–∞ Live Genshin Impact (@livegenshinimpact) –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–æ–∑–º–æ–∂–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –õ—É–Ω—É –∏–ª–∏ –ü—Ä–∏–º–æ–≥–µ–º—ã –∫—Ä—É—Ç—è –∞–≤—Ç–æ–º–∞—Ç (/start ‚Üí –ö—Ä—É—Ç–∏—Ç—å –ê–≤—Ç–æ–º–∞—Ç! üé∞).\n\n–ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –∏ –ø–æ–ª—É—á–∏—Ç—å –õ—É–Ω—É –∏–ª–∏ –ü—Ä–∏–º–æ–≥–µ–º—ã - –∏–≥—Ä–∞–π—Ç–µ –≤ –∞–≤—Ç–æ–º–∞—Ç. –ó–∞ –∫–∞–∂–¥—É—é –∏–≥—Ä—É –≤ –ª—É–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç –≤–∞—à —à–∞–Ω—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –õ—É–Ω—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 0.1%, –∞ —à–∞–Ω—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ü—Ä–∏–º–æ–≥–µ–º–æ–≤ –Ω–∞ 0.2%.\n–®–∞–Ω—Å –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ''–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà'' (/start ‚Üí ''–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà'').\n\n–ë–æ—Ç –õ—É–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏ –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ!")


@dp.message_handler(text=['–†–µ–∫–ª–∞–º–∞ üí∞'])
async def get_reklama(msg: types.message):
    keyboard = InlineKeyboardMarkup()
    text = "–†–µ–∫–ª–∞–º–∞ –≤ –±–æ—Ç–µ"
    url = "https://t.me/+jTCKqLE6ADQ0NTQy"
    button = InlineKeyboardButton(text=text, url=url)
    keyboard.add(button)
    await msg.answer(
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–µ –≤ –±–æ—Ç–µ –õ—É–Ω–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç\n- –í—Å—é –∏–Ω–æ—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n- –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–∞ –≤ –±–æ—Ç–µ, —Ç–∞–∫–∂–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∫–∏–¥–∫–∏, –æ—Ç–∑—ã–≤—ã –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ :)",
        reply_markup=keyboard)


@dp.message_handler(text=['–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üíª'])
async def get_helme(msg: types.message):
    await msg.answer("–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n–ü–æ–∫–∞ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: @sad_bane")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row('–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà', '–ö—Ä—É—Ç–∏—Ç—å –ê–≤—Ç–æ–º–∞—Ç! üé∞')
    keyboard.row('–ü–æ–ª—É—á–∏—Ç—å –∂–µ—Ç–æ–Ω—ã üéü', '–û –±–æ—Ç–µ ü§ñ')
    keyboard.row('–†–µ–∫–ª–∞–º–∞ üí∞', '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üíª')
    return keyboard

#–ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–∞–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=['photo', 'text', 'animation'], state=Form.photo)
async def photo_and_post(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        with db_lock:
            cursor.execute("SELECT user_id FROM user_stats")
            records = cursor.fetchall()
            conn.commit()
        if msg.content_type == "photo":
            file_id = msg.photo[-1].file_id
            for i in records:
                try:
                    await bot.send_photo(chat_id=i[0], caption=str(Form.caption), photo=file_id)
                except BotBlocked as E:
                    print(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å id {i[0]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –Ω–µ–º—É –Ω–µ –ø—Ä–∏—à–ª–µ—Ç—Å—è\n=====================================================\n{E}")
                    continue
            await state.finish()
            return await msg.answer("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è!")
        if msg.content_type == "animation":
            file_id = msg.animation.file_id
            for i in records:
                try:
                    await bot.send_animation(chat_id=i[0], caption=str(Form.caption), animation=file_id)
                except BotBlocked as E:
                    print(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å id {i[0]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –Ω–µ–º—É –Ω–µ –ø—Ä–∏—à–ª–µ—Ç—Å—è\n=====================================================\n{E}")
                    continue
            await state.finish()
            return await msg.answer("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è!")
        else:
            await state.finish()
            return await msg.answer("–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ –≥–∏—Ñ")


# –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢–ê
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
