import telebot
import sqlite3
import datetime
import threading
import random
import config
import time
import datetime
import json

user_tokens = {}

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
last_command_time = {}

# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
bot = telebot.TeleBot(config.TOKEN)

# –ó–¥–µ—Å—å config.channel_id —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ä–∞–≤–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π channel_id
channel_id = config.channel_id

admin_ids = [629025283, 886070687]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞


# –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
conn = sqlite3.connect('bot_stats.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_stats (
        user_id INTEGER PRIMARY KEY,
        luna INTEGER,
        primogems INTEGER,
        tokens INTEGER
    )
''')
conn.commit()

# –°–æ–∑–¥–∞–µ–º –º—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_lock = threading.Lock()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    user_id = message.chat.id
    with db_lock:
        cursor.execute('SELECT user_id FROM user_stats WHERE user_id=?', (user_id,))
        if cursor.fetchone() is None:
            cursor.execute('INSERT INTO user_stats (user_id, luna, primogems, tokens) VALUES (?, 0, 0, 1)', (user_id,))
            conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.send_message(user_id, '–ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è (–∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è):\n\n- –ù–∞–∂–º–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞;\n- –ù–∞–∂–º–∏ "–ö—Ä—É—Ç–∏—Ç—å –ê–≤—Ç–æ–º–∞—Ç! üé∞" —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ—é —É–¥–∞—á—É!', reply_markup=get_main_keyboard())

def process_start_command(message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –ø–æ–≤—Ç–æ—Ä–Ω–æ
    start_command(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mystats
@bot.message_handler(func=lambda message: message.text.lower() == '–º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà')
def my_stats_command(message):
    user_id = message.chat.id
    with db_lock:
        cursor.execute('SELECT luna, primogems, tokens FROM user_stats WHERE user_id=?', (user_id,))
        stats = cursor.fetchone()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    message = f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n'
    message += f'‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n'
    message += f'- ID –∞–∫–∫–∞—É–Ω—Ç–∞: {user_id}\n'
    message += f'- –õ—É–Ω–∞: {stats[0]}\n'
    message += f'- –ü—Ä–∏–º–æ–≥–µ–º—ã: {stats[1]}\n'
    message += f'- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤: {stats[2]}\n'
    message += f'‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï'
    bot.send_message(user_id, message)


from datetime import datetime, timedelta

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
last_command_time = {}


@bot.message_handler(func=lambda message: message.text == '–ö—Ä—É—Ç–∏—Ç—å –ê–≤—Ç–æ–º–∞—Ç! üé∞')
def play_slot_machine(message):
    user_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    if user_id in last_command_time and datetime.now() - last_command_time[user_id] < timedelta(seconds=10):
        bot.send_message(user_id, '–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ!')
        return

    with db_lock:
        cursor.execute('SELECT tokens FROM user_stats WHERE user_id=?', (user_id,))
        tokens = cursor.fetchone()[0]
        if tokens < 1:
            bot.send_message(user_id, '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∂–µ—Ç–æ–Ω–æ–≤ –¥–ª—è –∏–≥—Ä—ã –≤ –∞–≤—Ç–æ–º–∞—Ç')
            return
        cursor.execute('UPDATE user_stats SET tokens=tokens-1 WHERE user_id=?', (user_id,))
        conn.commit()

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≥–∏—Ñ–∫—É
    gifs = ['win_luna.gif.gif', 'win_primogems.gif.gif', 'lose_1.gif.gif', 'lose_2.gif.gif', 'lose_3.gif.gif', 'lose_4.gif.gif']
    win_probability = 0.00001 # 0.001%
    if random.random() < win_probability:
        animation = gifs[0]
        with db_lock:
            cursor.execute('UPDATE user_stats SET luna=luna+1 WHERE user_id=?', (user_id,))
            conn.commit()
        message_text = f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ª—É–Ω—É!'
    elif random.random() < win_probability:
        animation = gifs[1]
        with db_lock:
            cursor.execute('UPDATE user_stats SET primogems=primogems+10 WHERE user_id=?', (user_id,))
            conn.commit()
        message_text = f'–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø—Ä–∏–º–æ–≥–µ–º—ã!'
    else:
        animation = random.choice(gifs[2:])
        message_text = '–Ø —Å–æ–∂–∞–ª–µ—é, –Ω–æ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ü•∫\n\n–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â—ë –∂–µ—Ç–æ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ–ª—É—á–∏—Ç—å –∂–µ—Ç–æ–Ω—ã üéü"'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏—Ñ–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
    animation_message = bot.send_animation(user_id, open(animation, 'rb'), caption='–ö—Ä—É—Ç–∏–º –∞–≤—Ç–æ–º–∞—Ç! üé∞')

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    last_command_time[user_id] = datetime.now()

    # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
    time.sleep(10)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏—Ñ–∫–æ–π
    bot.delete_message(user_id, animation_message.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä—ã
    bot.send_message(user_id, message_text)

@bot.message_handler(commands=['astats'])
def stats_command(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.chat.id not in admin_ids:
        bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
        return

    with db_lock:
        cursor.execute('SELECT COUNT(*) FROM user_stats')
        count = cursor.fetchone()[0]

    bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}')
    
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ—Ç–æ–Ω–æ–≤
@bot.message_handler(commands=['addtokens'])
def add_tokens_command(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.chat.id not in admin_ids:
        bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:]
    if len(args) != 2:
        bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addtokens <user_id> <amount>')
        return
    try:
        user_id = int(args[0])
        amount = int(args[1])
    except ValueError:
        bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addtokens <user_id> <amount>')
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ—Ç–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    with db_lock:
        cursor.execute('UPDATE user_stats SET tokens=tokens+? WHERE user_id=?', (amount, user_id))
        conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_chat_id = get_user_chat_id(user_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(user_chat_id, f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞–º {amount} –∂–µ—Ç–æ–Ω–æ–≤. –°–∫–æ—Ä–µ–π –∫—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É!')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    bot.send_message(message.chat.id, f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —Ç–µ–ø–µ—Ä—å {amount} –∂–µ—Ç–æ–Ω–æ–≤')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
@bot.message_handler(commands=['broadcast'])
def broadcast_message(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.chat.id not in admin_ids:
        bot.send_message(message.chat.id, '–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º')
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    message_text = message.text[11:]

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
    with db_lock:
        cursor.execute('SELECT user_id FROM user_stats')
        user_ids = [row[0] for row in cursor.fetchall()]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–æ—Ç–∞
    for user_id in user_ids:
        bot.send_message(user_id, message_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤
def get_channels_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    for channel in channels:
        keyboard.add(telebot.types.InlineKeyboardButton(text=channel, callback_data=f'channel_{channel}'))
    return keyboard


channels = [
    {'name': 'Live Genshin Impact', 'username': '@LiveGenshinImpact'},
    {'name': 'Kanal2', 'username': '@onlinegenshinimpact'},
    {'name': 'svegak', 'username': '@ccddcssdc'}
]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü–æ–ª—É—á–∏—Ç—å –∂–µ—Ç–æ–Ω—ã"
@bot.message_handler(func=lambda message: message.text == '–ü–æ–ª—É—á–∏—Ç—å –∂–µ—Ç–æ–Ω—ã üí∞')
def handle_get_tokens(message):
    channels_keyboard = get_channels_keyboard()
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:', reply_markup=channels_keyboard)


@bot.callback_query_handler(func=lambda call: call.data.startswith('channel_'))
def handle_channel(call):
    channel_name = call.data.split('_')[1]
    for channel in channels:
        if channel['username'] == channel_name:
            channel_title = channel['name']
            break

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª
    chat_member = bot.get_chat_member(channel_name, call.message.chat.id)
    if chat_member.status == 'member' or chat_member.status == 'creator':
        subscribed = True
    else:
        subscribed = False

    channel_menu_keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    if subscribed:
        check_subscription_button = telebot.types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ', callback_data='check_subscription')
    else:
        subscribe_button = telebot.types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üîî', url='https://t.me/' + channel_name[1:])
        check_subscription_button = telebot.types.InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚ùå', callback_data='check_subscription')
        channel_menu_keyboard.add(subscribe_button)
    back_button = telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
    channel_menu_keyboard.add(check_subscription_button, back_button)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª {channel_title}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=channel_menu_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é –∫–∞–Ω–∞–ª–∞
@bot.callback_query_handler(func=lambda call: call.data == 'back')
def handle_back_button(call):
    channels_keyboard = get_channels_keyboard()
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:', reply_markup=channels_keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row('–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà', '–ö—Ä—É—Ç–∏—Ç—å –ê–≤—Ç–æ–º–∞—Ç! üé∞')
    keyboard.row('–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã')
    return keyboard



# –î–õ–Ø –û–ë–†–ê–¢–ù–û–ì–û –°–ú–°
def get_user_chat_id(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ user_id
    user = bot.get_chat_member(config.channel_name, user_id).user
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return user.id

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()